{"version":3,"file":"static/js/427.ea8a8c1c.chunk.js","mappings":"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","sources":["helpers/yupSchema.js","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const validationSchemaRegistation = yup.object().shape({\n  username: yup.string().min(3).required('Please Enter your name'),\n  email: yup.string().email().required('Please Enter your email'),\n  password: yup.string().min(6).max(16).required('Please Enter your password'),\n});\n\nexport const validationSchemaLogin = yup.object().shape({\n  email: yup.string().email().required('Please Enter your email'),\n  password: yup.string().min(6).max(16).required('Please Enter your password'),\n});\n//   name: yup\n//     .string()\n//     .min(3)\n//     .matches(regExp.name, 'Name is not valid')\n//     .required('Please Enter your name'),\n//   email: yup\n//     .string()\n//     .matches(regExp.email, 'Email is not valid')\n//     .required('Please Enter your email'),\n//   password: yup\n//     .string()\n//     .required('Please Enter your password')\n//     .matches(\n//       regExp.password,\n//       'Must Contain 8 Characters, One Uppercase, One Lowercase, One Number'\n//     ),\n","import styled from '@emotion/styled'\nimport TextField from '@mui/material/TextField';\n\nexport const MainContainer = styled.div`\n     display: flex;\n    align-items: center;\n    flex-direction: column;\n`\nexport const TittleContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    margin-bottom: 30px;\n`\n \nexport const Title = styled.h2`\n    font-weight: 200;\n    font-family: Helvetica Neue, san-serif;\n`\n  export const Formm = styled.form`\n     width: 320px;\n  `\n \n export const Input = styled(TextField)`\n     display: flex;\n    flex-direction: column;\n    margin-bottom: 26px;\n `\n  \n  export const Buttonn = styled.button`\n    width: 320px;\n    padding: 3px;\n    border-radius: 1em;\n    border-color: green;\n    &:hover,\n    &:focus {\n        background: rgb(46, 138, 34);\n        /* background: aqua; */\n    /* border: none; */\n    /* border-color: rgb(82, 255, 59); */\n    }\n\n  `\n  \n  \n  \n  ","import CssBaseline from '@mui/material/CssBaseline';\n// import TextField from '@mui/material/TextField';\n// import FormControl from '@mui/material/FormControl';\n// import FormHelperText from '@mui/material/FormHelperText';\nimport Button from '@mui/material/Button';\n// import { Formik, Field } from 'formik';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'Redux/auth/operations';\n// import css from './RegisterForm.module.css';\nimport { validationSchemaRegistation } from '../../helpers/yupSchema';\n// import { FormError } from 'helpers/formError';\nimport {MainContainer , TittleContainer , Title, Formm, Input } from 'components/RegisterForm/RegisterForm.styled'\n\n\n\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      username: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchemaRegistation,\n    onSubmit: async (values) => {\n      const res = await dispatch(register( {\n        name: values.username,\n        email: values.email,\n        password: values.password,\n      }))\n      console.log(res);\n      console.log(values);\n\n      if (res.type === 'auth/register/fulfilled') {\n        formik.resetForm();\n      }\n      \n      // formik.resetForm();\n      \n    },\n  \n  });\n\n\n \n\n  // const handleSubmit = (values, actions) => {\n  //   // e.preventDefault();\n\n  //   console.log(values.password);\n  //   console.log(values.username);\n  //   console.log(values.email);\n  //   console.log(actions);\n  //   dispatch(\n  //     register({\n  //       name: values.username,\n  //       email: values.email,\n  //       password: values.password,\n  //     })\n  //   );\n  //   actions.resetForm();\n  // };\n\n  return (\n    <MainContainer >\n    <CssBaseline />\n      <TittleContainer >\n        <Title>Create a PHONEBOOK account</Title>\n      </TittleContainer>\n      \n        <Formm  autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n          \n            <Input\n              type=\"text\"\n              name=\"username\"\n              id=\"username\"\n         \n          label=\"username\"\n              // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              // required\n              value={formik.values.username}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.username && Boolean(formik.errors.username)}\n          helperText={formik.touched.username && formik.errors.username}\n              \n            />\n            {/* <FormError name=\"username\" /> */}\n          \n          \n            <Input\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n         \n          label=\"email\"\n              // pattern=\"/^[ A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\\s*?$/i\"\n              // required\n              value={formik.values.email}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n            />\n            {/* <FormError name=\"email\" /> */}\n          \n          {/* <FormControl variant=\"outlined\"> */}\n          \n            <Input\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n         \n          label=\"Password\"\n              // pattern=\"/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/\"\n              // required\n              value={formik.values.password}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n            />\n            {/* <FormError name=\"password\" /> */}\n            {/* <FormHelperText>\n              {formik.touched.password && formik.errors.password}\n            </FormHelperText> */}\n            \n          \n          {/* </FormControl> */}\n          <Button  type=\"submit\" color=\"primary\"  variant=\"contained\" fullWidth>\n            Register\n          </Button>\n        </Formm>\n      \n    </MainContainer>\n  );\n};\n\n// return (\n//   <div className={css.mainContainer}>\n//   <CssBaseline />\n//     <div className={css.titleContainer}>\n//       <h2 className={css.title}>Create a PHONEBOOK account</h2>\n//     </div>\n//     <Formik\n//       initialValues={initialValues}\n//       onSubmit={handleSubmit}\n//       validationSchema={validationSchemaRegistation}\n//     >\n//       <Form className={css.form} autoComplete=\"off\">\n//         <label className={css.label}>\n//           Username\n//           <Field\n//             type=\"text\"\n//             name=\"username\"\n//             // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             // required\n//           />\n//           <FormError name=\"username\" />\n//         </label>\n//         <label className={css.label}>\n//           Email\n//           <Field\n//             type=\"email\"\n//             name=\"email\"\n//             // pattern=\"/^[ A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\\s*?$/i\"\n//             // required\n//           />\n//           <FormError name=\"email\" />\n//         </label>\n//         <label className={css.label}>\n//           Password\n//           <Field\n//             type=\"password\"\n//             name=\"password\"\n//             // pattern=\"/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/\"\n//             // required\n//           />\n//           <FormError name=\"password\" />\n//         </label>\n//         <button className={css.button} type=\"submit\">\n//           Register\n//         </button>\n//       </Form>\n//     </Formik>\n//   </div>\n// );\n// };","// import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      \n        <title>Registration</title>\n      \n      <RegisterForm />\n    </div>\n  );\n}"],"names":["validationSchemaRegistation","yup","shape","username","min","required","email","password","max","validationSchemaLogin","MainContainer","styled","_templateObject","_taggedTemplateLiteral","TittleContainer","_templateObject2","Title","_templateObject3","Formm","_templateObject4","Input","TextField","_templateObject5","_templateObject6","RegisterForm","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","res","wrap","_context","prev","next","register","name","sent","console","log","type","resetForm","stop","_x","apply","arguments","_jsxs","children","_jsx","CssBaseline","autoComplete","handleSubmit","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","Button","color","variant","fullWidth","Register"],"sourceRoot":""}