{"version":3,"file":"static/js/898.dfe499f8.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","Redux/contacts/selectors.js","components/Form/Form.jsx","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/Contacts.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/Loader/Loader.jsx","webpack://react-homework-template/./src/pages/UserContacts.module.css?c55e","pages/UserContacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"form__field\":\"Form_form__field__7K6Cd\",\"form__input\":\"Form_form__input__qyBih\",\"form__btn\":\"Form_form__btn__sPTnm\"};","export const getContacts = state => state.contacts.contacts;\nexport const getFilter = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","import {useState} from 'react'\nimport { nanoid } from 'nanoid';\nimport css from 'components/Form/Form.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../Redux/contacts/selectors'\nimport { addContact } from '../../Redux/contacts/operations'\n\nexport const Form = () => {\n  \n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts)\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n\n    const inputChange = (event) => {\n    const { name, value } = event.target;\n  \n       switch (name) {\n         case 'name':\n           setName(value);\n           break;\n         \n         case 'number':\n           setNumber(value);\n           break;\n         \n         default:\n           return;\n       }\n    \n  }\n\n  const clearForm = () => {\n    setName('');\n    setNumber('')\n   \n    };\n\n \n  \n    const addContacts = ({ name, number }) => {\n    \n    const newContact = { id: nanoid(), name, number };\n    const checkUser = contacts.find(\n      (contact) => contact.name === newContact.name\n    );\n\n    checkUser\n      ? alert(`${name} is already in the contacts`)\n      : dispatch(addContact(newContact));\n  };\n  \n  \n  const formSubmit = (event) => {\n    event.preventDefault();\n\n    addContacts({ name, number })\n    \n    clearForm()\n  }\n    \n    const nameInputId = nanoid();\n   const  telInputId = nanoid()\n    \n \n  \n        return (\n            <form onSubmit={formSubmit} className={css.form}>\n          <label htmlFor={nameInputId} className={css.form__field}>\n            Name:\n             <input\n              id={nameInputId}     \n              className={css.form__input}\n              value={name}\n              onChange={inputChange}\n              name=\"name\"\n              type=\"text\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              \n            />\n          </label>\n          <label htmlFor={telInputId} className={css.form__field}>\n            Number:\n            <input\n              id={telInputId}  \n              className={css.form__input} \n              value={number}\n              onChange={inputChange}\n              name=\"number\"\n              type=\"tel\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </label>\n\n          <button className={css.form__btn} type=\"submit\">Add contact!</button>\n        </form>\n        )\n   \n}","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Contacts_list__R3QeP\",\"item\":\"Contacts_item__WTDnh\",\"item__container\":\"Contacts_item__container__n54oO\",\"item__name\":\"Contacts_item__name__r+E5O\",\"item__number\":\"Contacts_item__number__Lyh3v\",\"item__btn\":\"Contacts_item__btn__GIYFd\"};","import PropTypes from \"prop-types\";\nimport css from 'components/Contacts/Contacts.module.css'\nimport { getContacts, getFilter } from '../../Redux/contacts/selectors'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../Redux/contacts/operations'\n\nexport const ContactList = () => {\n const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n \n  const filter = useSelector(getFilter);\n\n  \n        const normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter));\n  \n\n \n  return (\n    <ol className={css.list}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id} className={css.item}>\n          <div className={css.item__container}>\n            <p>\n            <span className={css.item__name}>{name}: </span>\n              <span className={css.item__number}>{number}</span>\n              </p>\n          <button className={css.item__btn}type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n            </button>\n            </div>\n        </li>\n      ))}\n    </ol>\n  );\n};\n\n\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n  // onDeleteContact: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"Filter_filterContainer__8G57N\",\"field\":\"Filter_field__IlYZE\",\"field__input\":\"Filter_field__input__3EfX9\"};","// import PropTypes from 'prop-types';\nimport css from 'components/Filter/Filter.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterChange } from '../../Redux/contacts/slice'\nimport { getFilter } from '../../Redux/contacts/selectors'\n\n \n  \nexport const Filter = () => {\nconst dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n    return (\n      <div className={css.filterContainer}>\n      <label className={css.field}>\n        Find contact by Name\n        <input\n          className={css.field__input}\n            type=\"text\"\n          value={filter}\n          onChange={event => dispatch(filterChange(event.target.value))}\n        />\n            </label>\n            </div>\n  );\n}\n\n\n\n// Filter.propTypes = {\n//   filter: PropTypes.string.isRequired,\n//   onFilterChange: PropTypes.func.isRequired,\n// };","import { MagnifyingGlass } from 'react-loader-spinner'\n\nexport const Loader = () => {\n    return (\n        <MagnifyingGlass\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"MagnifyingGlass-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"MagnifyingGlass-wrapper\"\n  glassColor = '#c0efff'\n  color = '#e15b64'\n/>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"sectionsContainer\":\"UserContacts_sectionsContainer__70QLq\",\"addList\":\"UserContacts_addList__+xnYy\",\"contactsList\":\"UserContacts_contactsList__EUytP\",\"title\":\"UserContacts_title__NQWSQ\"};","\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\nimport { Form } from 'components/Form/Form'\nimport { ContactList } from 'components/Contacts/Contacts'\nimport { Filter } from 'components/Filter/Filter'\nimport { getIsLoading, getError } from '../Redux/contacts/selectors'\nimport { fetchContacts } from 'Redux/contacts/operations'\nimport { Loader } from '../components/Loader/Loader'\nimport css from 'pages/UserContacts.module.css'\n\n\nexport default function UserContacts() {\n    const dispatch = useDispatch();                                      \n  const isloading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  },[dispatch])\n\n    return (\n          <div className={css.sectionsContainer}>\n           <section className={css.addList}>\n             <h2 className={css.title}>Add Contact</h2>\n            <Form  />\n           </section>\n          <section className={css.contactsList}>\n             <h2 className={css.title}>Contacts</h2>\n             <Filter />\n             {isloading && !error && <Loader />}\n             <ContactList />\n           </section>\n         </div>\n  );\n}"],"names":["getContacts","state","contacts","getFilter","filter","getIsLoading","isLoading","getError","error","Form","dispatch","useDispatch","useSelector","useState","name","setName","number","setNumber","inputChange","event","target","value","nameInputId","nanoid","telInputId","onSubmit","preventDefault","newContact","id","find","contact","alert","addContact","addContacts","className","css","htmlFor","onChange","type","pattern","title","required","ContactList","normalizedFilter","toLowerCase","visibleContacts","includes","map","onClick","deleteContact","Filter","filterChange","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","UserContacts","isloading","useEffect","fetchContacts"],"sourceRoot":""}